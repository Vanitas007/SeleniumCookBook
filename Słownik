Tworze projekt Maven i cała konfiguracja projekty robi się automatycznie.
W pliku pom.xml wprowadzam używane w projekcie biblioteki <dependency>.

LoginAutomation
        https://stackoverflow.com/questions/63102108/driver-geturl-vs-driver-navigate-tourl
        driver.get(“url”); ładuje strone, ale nie przechowuje historii
        driver.navigate().to(“url’); ładuje strone i przechowuje historię przeglądarki umożliwiając
        navigate().forward(), navigate().back(), navigate().refresh()

Ustawiam wiekość okna przeglądarki
        driver.manage().window().setSize(new Dimension(1920, 1080));
        driver.manage().window().maximize();


    driver.navigate().to("http://automationpractice.com/index.php");
    lub
    driver.navigate().to(sklepURL);
        metody .to można używać to string wklepując po prostu link do strony.
        Można też używać to URL. należy wtedy zrobić zmienną np.
        URL googleURL = new URL(https://www.google.pl/);
        i wpisać po prostu ...().to(googleURL);
        wtedy gdy zmieni się adres strony wystarczy zmienić jedną wartość, a nie w każdym tescie
        dodatkowo konieczna jest obsługa wyjątku. Na tym przykładzie try/catch
        zmienna URL wystawiłem na samą góre zeby mogla byc uzywana przez wysztkie testy.

Stworzona zmienna sklepURL zeby nie trzeba bylo wprowadzac linka do kazdego testu z osobna
automatyczna obsluga wyjatku za pomoca try/catch
    URL sklepURL;
    {
        try {
            sklepURL = new URL("http://automationpractice.com/index.php");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

driver.quit(); - zamyka wszytskie procesy przeglądarki ORAZ geckodriver.exe (w menadzerze zakladka szczegoly)
driver.close(); - zamyka jedynie procesy przegladarki.


https://testelka.pl/selektory-w-selenium-najprostsze-metody/
Metoda findElement():
        - Wyszukiwanie elementów w Selenium WebDriver odbywa się za pomocą metod findElement()
            i findElements() dostarczonych za pośrednictwem interfejsów WebDriver i WebElement.
        - Metoda findElement() zwraca egzemplarz klasy WebElement, który można znaleźć w modelu DOM
            strony na podstawie określonych lokalizatorów nazywanych także kryteriami wyszukiwania.
            Jeśli określona metoda nie zdoła znaleźć elementu przy użyciu określonego kryterium wyszukiwania,
            zgłasza wyjątek NoSuchElementFoundException.
        - Metoda findElements() zwraca listę obiektów WebElement spełniających podane kryteria wyszukiwania.
            Jeśli elementy nie zostaną znalezione, zwraca pustą listę.
        - Metody find pobierają argument w postaci lokalizatora lub obiektu kwerendy jako egzemplarza
            klasy By. Selenium WebDriver dostarcza klasę By, która obsługuje różne strategie lokalizacji.
    Na podstawie:
    ID -                        driver.findElement(By.id(<ID elementu))
    Nazwy -                     driver.findElement(By.name(<element name>))
    Nazwy klasy -               driver.findElement(By.className(<klasa_elementu>))
    Nazwy znacznika -           driver.findElement(By.tagName(<nazwa_znacznika_html>))
    Tekstu linka -              driver.findElement(By.linkText(<tekst_linka>))
    Częściowego tekstu linka -  driver.findElement(By.partialLinkText(<tekst_linka>))
    CSS -                       driver.findElement(By.cssSelector(<selektor_css>)) - https://testelka.pl/selektory-css/
    Xpath -                     driver.findElement(By.xpath(<wyrażenie_kwerendy_xpath>))

W niektórych przypadkach nie można użyć atrybutu id z następujących przyczyn:
     nie wszystkie elementy na stronie mają określony atrybut id;
     atrybuty id nie są określone dla kluczowych elementów na stronie;
     wartości atrybutu id są generowane dynamicznie.


driver.findElements(By.tagName("a")); - (https://www.w3schools.com/tags/tag_a.asp)
        - tag <a> definiuje hiperlinki i jest zazwyczaj połączony z atrybutem href który wskazuje adres
        jeśli <a> nie ma atrybutu href, to jest to tylko placeholder pod hyperlink

    Metoda findElements() zwraca w postaci listy obiektów WebElement wszystkie elementy pasujące
    do przekazanych kryteriów wyszukiwania.
            List<WebElement> links = driver.findElements(By.tagName("a"));
    Metoda size() typu List pozwala stwierdzić, ile elementów jest na liście.
            assertEquals(4, links.size());
    Po tej liście można iterować, wyświetlając dla każdego linka adres docelowy.
            for(WebElement link : links) {
            System.out.println(link.GetAttribute("href"));
            }


driver.findElement(By.linkText(<tekst_linka>)) - s60
        - Metoda przydatna do wyszukiwania linkow z dynamicznym tekstem na podstawie wyświetlanego tekstu

WebElement loginButton = driver.findElement(By.tagName("button"));
loginButton.click();
        - Załóżmy, że na stronie jest jeden przycisk. Ten przycisk można zlokalizować na podstawie jego
          znacznika w następujący sposób.
WebElement table = driver.findElement(By.id("summaryTable"));
List<WebElement> rows = table.findElements(By.tagName("tr"));
assertEquals(10, rows.size());
        - chcemy policzyć, ile wierszy jest wyświetlanych w elemencie
          <table>. Można to zrobić w następujący sposób.


          https://testelka.pl/xpath/
          https://testelka.pl/download/CheatSheet.pdf